import React, { useEffect, useState } from 'react';
import Header from '../landingpage/Header';
import '../pages/Cart.css';
import Checkout from './checkout';
import { Link , useNavigate} from 'react-router-dom';
import image from './search_image.png'
import loginPls from './login_animation.png'
import { getFirestore, collection, query, where, getDocs, updateDoc } from "firebase/firestore"; // Import Firestore functions


function Cart({}) {
  const [cartlist, setLocalCartlist] = useState([]);
  const [total, setTotal] = useState(0);
  const navigate= useNavigate();
  const [loading,setLoading]=useState(true)
  const [isLoggedIn, setIsLoggedIn] = useState();
  const db = getFirestore(); 


  useEffect(() => {
    const userFromLocalStorage = localStorage.getItem('uid');
    if (userFromLocalStorage) {
      setIsLoggedIn(true);
      fetchCartListFromFirestore(userFromLocalStorage);
    }
  }, []);

  const fetchCartListFromFirestore = (uid) => {
    // Make a Firestore query to fetch the cartlist for the user with the matching UID
    const usersCollectionRef = collection(db, 'users');
    const queryRef = query(usersCollectionRef, where('uid', '==', uid));

    getDocs(queryRef)
      .then((querySnapshot) => {
        if (!querySnapshot.empty) {
          querySnapshot.forEach((doc) => {
            const userData = doc.data();
            if (userData.cartlist) {
              setLocalCartlist(userData.cartlist);
            }
          });
        }
      })
      .catch((error) => {
        console.error('Error fetching user documents:', error);
      })
      .finally(() => {
        setLoading(false);
      });
  };

  const [itemQuantities, setItemQuantities] = useState({});

  useEffect(() => {
    let newTotal = 0;
    cartlist.forEach((item, index) => {
      newTotal += (item.price * (itemQuantities[index] || 1));
    });
    setTotal(newTotal);
  }, [cartlist, itemQuantities]);

  const increment = (index) => {
    const updatedQuantities = { ...itemQuantities };
    updatedQuantities[index] = (updatedQuantities[index] || 0) + 1;
    setItemQuantities(updatedQuantities);
  };

  const decrement = (index) => {
    if (itemQuantities[index] > 1) {
      const updatedQuantities = { ...itemQuantities };
      updatedQuantities[index] -= 1;
      setItemQuantities(updatedQuantities);
    }
  };

  const toggleIcon = (index) => {
    const itemToRemove = cartlist[index];
    const updatedCartList = cartlist.filter((item, i) => i !== index);
    setLocalCartlist(updatedCartList);
  
    // Remove the item from the Firestore cartlist
    const storedUID = localStorage.getItem('uid');
    if (storedUID) {
      const usersCollectionRef = collection(db, 'users');
      const queryRef = query(usersCollectionRef, where('uid', '==', storedUID));
  
      getDocs(queryRef)
        .then((querySnapshot) => {
          if (!querySnapshot.empty) {
            querySnapshot.forEach((doc) => {
              // doc.id is the document ID (auto-generated by Firestore)
              const userData = doc.data();
              const updatedUserData = {
                ...userData,
                cartlist: updatedCartList,
              };
  
              // Update the user document in Firestore with the new cartlist
              updateDoc(doc.ref, updatedUserData)
                .then(() => {
                  console.log('Item removed from cartlist in Firestore.');
                })
                .catch((error) => {
                  console.error('Error updating user document in Firestore:', error);
                });
            });
          } else {
            console.log('User document with UID not found.');
          }
        })
        .catch((error) => {
          console.error('Error fetching user documents:', error);
        });
    }
  };
 
  const proceedToCheckout = () => {
    navigate('/checkout', {
      state: {
        total,
        cartlist,
        itemQuantities,
      },
    });
  };
  
  const viewProductDetails = (imageUrl,productName ,price,GST,category,description) => {
    navigate('/productdetails', { state: { imageUrl,productName ,price,GST,category,description} });
    console.log(description)
    console.log()
  };

  return (
<div>
  <Header isHomepage={false} />
  {isLoggedIn ? (
    loading ? (
      <div className="spinner-container">
        <div className="spinner"></div>
      </div>
    ) : cartlist.length ? (
      <div>
        <p className="pro">
          {cartlist.map((item, index) => (
            <div className="tit" key={index}>
              <img className="ime" src={item.imageUrl} alt={item.productName}
                 onClick={() => viewProductDetails(item.imageUrl,item.productName,item.price,item.gst,item.category,item.description)}/>
              <div className="grid2">
                <h1 className="headin">{item.productName}</h1>
                <p className="pricee">₹{item.price}</p> 
              </div>
              <div className="grid3">
                <div className="pri">
                  <p className="pric">₹{item.price * (itemQuantities[index] || 1)}</p>
                </div>
                <div className="add-sub">
                  <button className="button" onClick={() => decrement(index)}>-</button>
                  <p className="numofitem">{itemQuantities[index] || 1}</p>
                  <button className="button" onClick={() => increment(index)}>+</button>
                </div>
                <div className="remove">
                  <button className="rem" onClick={() => toggleIcon(index)}>Remove</button>
                </div>
              </div>
            </div>
          ))}
        </p>
        <div className="total">
          <p>Subtotal ₹{total}</p>
          <button className="order" onClick={proceedToCheckout}>
            Proceed to checkout
          </button>
        </div>
      </div>
    ) : (
      <div className="haha">
        <img className="empty" src={image} alt="ruby" />
        <p className="list">Your Cart Is Empty!!</p>
      </div>
    )
  ) : (<div>
    <img className="empty" src={loginPls} alt="Login Please" />
    <p className="list">Please Login to view your Cartlist!!</p>
    </div>
  )}
</div>

  );
}

export default Cart;





